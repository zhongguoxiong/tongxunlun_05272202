{
  "uid" : "ea9a6d3d56781e37",
  "name" : "Test_Add_User.test_input_lianxiren_info[test_user_003--1 348-883-4010-1 348-883-4010]",
  "fullName" : "test_add_user.Test_Add_User.test_input_lianxiren_info[test_user_003--1 348-883-4010-1 348-883-4010]",
  "historyId" : "ca3ea3f3e3fa107dff84856144d465db",
  "time" : {
    "start" : 1558982333795,
    "stop" : 1558982334617,
    "duration" : 822
  },
  "description" : "",
  "descriptionHtml" : "",
  "status" : "failed",
  "statusMessage" : "KeyError: 'status'",
  "statusTrace" : "self = <test_add_user.Test_Add_User object at 0x0000000004668400>, test_num = 'test_user_003', name = '', phone = '1 348-883-4010', expect = '1 348-883-4010'\n\n    @allure.step(title=\"输入用户信息\")\n    @pytest.mark.usefixtures(\"click_add_user_button\")\n    @pytest.mark.parametrize(\"test_num,name,phone,expect\",read_test_data())#[('test_user_001', '', '', ''), ('test_user_002', 'x', '', 'x'), ('test_user_003', '', '1 348-883-4010', '1 348-883-4010'), ('test_user_004', 'xx', '1 348-883-4010', 'xx')]\n    def test_input_lianxiren_info(self,test_num,name,phone,expect):\n>       self.addUserPageObj.input_user_info(name,phone)\n\nscripts\\test_add_user.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\add_user_page.py:15: in input_user_info\n    self.input_text(PageElements.xingming_input,username)\nbase\\baseaction.py:22: in input_text\n    element_o = self.find_element_o(loc)\nbase\\baseaction.py:12: in find_element_o\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nbase\\baseaction.py:12: in <lambda>\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\webdriver.py:222: in find_element\n    'value': value})['value']\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:233: in execute\n    self.error_handler.check_response(response)\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000000004627940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\babel-runtime\\\\\\\\regenerator\\\\\\\\runtime.js:136:37)\\\\n    at <anonymous>\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n>                       status = value[\"status\"]\nE                       KeyError: 'status'\n\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:106: KeyError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "failed",
    "statusMessage" : "KeyError: 'status'",
    "statusTrace" : "self = <test_add_user.Test_Add_User object at 0x0000000004668400>, test_num = 'test_user_003', name = '', phone = '1 348-883-4010', expect = '1 348-883-4010'\n\n    @allure.step(title=\"输入用户信息\")\n    @pytest.mark.usefixtures(\"click_add_user_button\")\n    @pytest.mark.parametrize(\"test_num,name,phone,expect\",read_test_data())#[('test_user_001', '', '', ''), ('test_user_002', 'x', '', 'x'), ('test_user_003', '', '1 348-883-4010', '1 348-883-4010'), ('test_user_004', 'xx', '1 348-883-4010', 'xx')]\n    def test_input_lianxiren_info(self,test_num,name,phone,expect):\n>       self.addUserPageObj.input_user_info(name,phone)\n\nscripts\\test_add_user.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\add_user_page.py:15: in input_user_info\n    self.input_text(PageElements.xingming_input,username)\nbase\\baseaction.py:22: in input_text\n    element_o = self.find_element_o(loc)\nbase\\baseaction.py:12: in find_element_o\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nbase\\baseaction.py:12: in <lambda>\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\webdriver.py:222: in find_element\n    'value': value})['value']\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:233: in execute\n    self.error_handler.check_response(response)\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000000004627940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\babel-runtime\\\\\\\\regenerator\\\\\\\\runtime.js:136:37)\\\\n    at <anonymous>\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n>                       status = value[\"status\"]\nE                       KeyError: 'status'\n\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:106: KeyError",
    "steps" : [ {
      "name" : "输入用户信息",
      "time" : {
        "start" : 1558982334026,
        "stop" : 1558982334537,
        "duration" : 511
      },
      "status" : "failed",
      "statusMessage" : "self = <test_add_user.Test_Add_User object at 0x0000000004668400>, test_num = 'test_user_003', name = '', phone = '1 348-883-4010', expect = '1 348-883-4010'\n\n    @allure.step(title=\"输入用户信息\")\n    @pytest.mark.usefixtures(\"click_add_user_button\")\n    @pytest.mark.parametrize(\"test_num,name,phone,expect\",read_test_data())#[('test_user_001', '', '', ''), ('test_user_002', 'x', '', 'x'), ('test_user_003', '', '1 348-883-4010', '1 348-883-4010'), ('test_user_004', 'xx', '1 348-883-4010', 'xx')]\n    def test_input_lianxiren_info(self,test_num,name,phone,expect):\n>       self.addUserPageObj.input_user_info(name,phone)\n\nscripts\\test_add_user.py:37: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npage\\add_user_page.py:15: in input_user_info\n    self.input_text(PageElements.xingming_input,username)\nbase\\baseaction.py:22: in input_text\n    element_o = self.find_element_o(loc)\nbase\\baseaction.py:12: in find_element_o\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:71: in until\n    value = method(self._driver)\nbase\\baseaction.py:12: in <lambda>\n    return WebDriverWait(self.driver, 10, 0.5).until(lambda x: x.find_element(*loc))\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\webdriver.py:222: in find_element\n    'value': value})['value']\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:233: in execute\n    self.error_handler.check_response(response)\nc:\\python\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x0000000004627940>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"An element could not be located on the page u...\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\babel-runtime\\\\\\\\regenerator\\\\\\\\runtime.js:136:37)\\\\n    at <anonymous>\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n>                       status = value[\"status\"]\nE                       KeyError: 'status'\n\nc:\\python\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:106: KeyError",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "stepsCount" : 0,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "stepsCount" : 1,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "host",
    "value" : "Hasee-PC"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "severity",
    "value" : "normal"
  }, {
    "name" : "thread",
    "value" : "12000-MainThread"
  }, {
    "name" : "suite",
    "value" : "test_add_user"
  }, {
    "name" : "testClass",
    "value" : "test_add_user"
  }, {
    "name" : "testMethod",
    "value" : "Test_Add_User.test_input_lianxiren_info[test_user_003--1 348-883-4010-1 348-883-4010]"
  }, {
    "name" : "package",
    "value" : "test_add_user"
  }, {
    "name" : "resultFormat",
    "value" : "allure1"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "ea9a6d3d56781e37.json",
  "parameterValues" : [ ]
}